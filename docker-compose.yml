services:
  auth-service:
    build:
      context: /auth-service
      dockerfile: Dockerfile
    image: nndrez/auth-service
    container_name: auth-service
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "9000:8080"
    networks:
      - app-network
    depends_on:
      - user-service
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://127.0.0.1:12201"

  api-gateway:
    build:
      context: /api-gateway
      dockerfile: Dockerfile
    image: nndrez/api-gateway
    container_name: api-gateway
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      - auth-service
      - user-service
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://127.0.0.1:12201"

  user-db:
    image: postgres:18-alpine
    container_name: user-postgres-db
    restart: always
    environment:
      POSTGRES_DB: ${USER_POSTGRES_DB}
      POSTGRES_USER: ${USER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${USER_POSTGRES_PASSWORD}
    volumes:
      - user-postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  user-service:
    build:
      context: /user-service
      dockerfile: Dockerfile
    image: nndrez/user-service
    container_name: user-service
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://user-db:5432/${USER_POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${USER_POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${USER_POSTGRES_PASSWORD}
    depends_on:
      - user-db
      - rabbitmq
    networks:
      - app-network
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://127.0.0.1:12201"

  customer-db:
    image: postgres:18-alpine
    container_name: customer-postgres-db
    restart: always
    environment:
      POSTGRES_DB: ${CUSTOMER_POSTGRES_DB}
      POSTGRES_USER: ${CUSTOMER_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CUSTOMER_POSTGRES_PASSWORD}
    volumes:
      - customer-postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  customer-service:
    build:
      context: /customer-service
      dockerfile: Dockerfile
    image: nndrez/customer-service
    container_name: customer-service
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://customer-db:5432/${CUSTOMER_POSTGRES_DB:?Customer postgres DB not defined}
      SPRING_DATASOURCE_USERNAME: ${CUSTOMER_POSTGRES_USER:?Customer postgres user not defined}
      SPRING_DATASOURCE_PASSWORD: ${CUSTOMER_POSTGRES_PASSWORD:?Customer Postgres password not defined}
    depends_on:
      - customer-db
      - rabbitmq
    networks:
      - app-network
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://127.0.0.1:12201"

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - user-db
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:4.1.4-management-alpine
    container_name: rabbitmq
    restart: on-failure
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running", "-q" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  email-service:
    build:
      context: /email-service
      dockerfile: Dockerfile
    image: nndrez/email-service
    container_name: email-service
    restart: on-failure
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_MAIL_HOST: ${SPRING_MAIL_HOST:?Host email not defined}
      SPRING_MAIL_PORT: ${SPRING_MAIL_PORT:?Host email port not defined}
      SPRING_MAIL_USERNAME: ${SPRING_MAIL_USERNAME?:Email username not defined}
      SPRING_MAIL_PASSWORD: ${SPRING_MAIL_PASSWORD?:Email password not defined}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:-true}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:-true  }
    networks:
      - app-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    logging:
      driver: "gelf"
      options:
        gelf-address: "udp://127.0.0.1:12201"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - app-network
    depends_on:
      - prometheus

  elasticsearch:
    image:
      elasticsearch:9.1.5
    container_name: elasticsearch
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - app-network

  logstash:
    image:
      logstash:9.1.5
    container_name: logstash
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    ports:
      - "12201:12201/udp"
    networks:
      - app-network
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:9.1.5
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch

volumes:
  user-postgres-data:
    driver: local
  pgadmin-data:
    driver: local
  rabbitmq-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  customer-postgres-data:
    driver: local

networks:
  app-network:
    driver: bridge